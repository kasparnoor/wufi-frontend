# Component Patterns

The Wufi Storefront follows consistent component patterns for maintainability and consistency, using a unified component system that integrates shadcn/ui, Medusa UI, and custom Wufi components.

## Unified Component System
# Component Patterns

The Kraps Storefront follows consistent component patterns for maintainability and consistency, using a unified component system that integrates shadcn/ui, Medusa UI, and custom Kraps components.

## Unified Component System
# Component Organization System

The Kraps Storefront uses a **two-layer component architecture** for clear separation and logical organization:

## Layer 1: Foundation Components (`@/lib/components`)

### UI Primitives (`src/lib/components/ui/`)
**Purpose**: Universal, accessible UI components
**Import**: `@/lib/components`

- **shadcn/ui components**: `Button`, `Input`, `Dialog`, `Form`, `Select`, `Checkbox`
- **Enhanced components**: `ModernInput`, `ModernTooltip`, `InfoTooltip`
- **Skeleton components**: Loading states for all UI elements
- **Utilities**: `Toaster`, `Separator`

### Kraps Brand Components (`src/lib/components/kraps/`)
**Purpose**: Kraps-specific branded components
**Import**: `@/lib/components`

- `KrapsButton` - Brand-styled button with Kraps colors
- `EmailInput` - Enhanced email input with validation
- `PhoneInput` - Estonian phone number input
- `EstonianAddressInput` - Estonian address autocomplete

## Layer 2: Feature Components (`@/modules/`)

### Feature-Specific Components
**Purpose**: Business logic components organized by domain
**Import**: Direct from module paths

- **Layout**: `@/modules/layout/components/` - Navigation, header, footer
- **Account**: `@/modules/account/components/` - User management, login, dashboard
- **Cart**: `@/modules/cart/components/` - Shopping cart functionality
- **Checkout**: `@/modules/checkout/components/` - Payment, shipping, review
- **Products**: `@/modules/products/components/` - Product display, cards, previews
- **Common**: `@/modules/common/components/` - Shared feature components

## Import Strategy

### âœ… Foundation Components (from `@/lib/components`)
```tsx
import { 
  // UI primitives
  Button, Input, Dialog, Form, ModernInput,
  
  // Brand components
  KrapsButton, EmailInput, PhoneInput,
  
  // Utilities
  Toaster, Separator
} from "@/lib/components"
```

### âœ… Feature Components (direct imports)
```tsx
import CartButton from "@/modules/layout/components/cart-button"
import ProductCard from "@/modules/products/components/product-card"
import Login from "@/modules/account/components/login"
import LocalizedClientLink from "@/modules/common/components/localized-client-link"
```

## Decision Tree: Where Does This Component Go?

### ðŸ¤” Ask Yourself:
1. **Is it a UI primitive?** (Button, Input, Dialog) â†’ `src/lib/components/ui/`
2. **Is it Kraps brand-specific?** (KrapsButton, EmailInput) â†’ `src/lib/components/kraps/`
3. **Does it belong to a specific feature?** (Cart, Account, Products) â†’ `src/modules/{feature}/components/`
4. **Is it shared across features but not a UI primitive?** â†’ `src/modules/common/components/`

## Component Examples

### âœ… Foundation Components
- `Button` â†’ `src/lib/components/ui/button.tsx`
- `ModernInput` â†’ `src/lib/components/ui/modern-input.tsx`
- `KrapsButton` â†’ `src/lib/components/kraps/kraps-button/`
- `EmailInput` â†’ `src/lib/components/kraps/email-input/`

### âœ… Feature Components
- `CartButton` â†’ `src/modules/layout/components/cart-button/`
- `ProductCard` â†’ `src/modules/products/components/product-card/`
- `LoginForm` â†’ `src/modules/account/components/login/`
- `LocalizedClientLink` â†’ `src/modules/common/components/localized-client-link/`

## Best Practices

### 1. Component Structure
- Each component has its own directory with `index.tsx`
- Use TypeScript interfaces for all props
- Server vs. client components clearly separated with `"use client"`

### 2. Styling
- Tailwind utility classes for all styling
- Follow shadcn patterns for consistency
- Maintain Kraps brand colors (yellow-400 primary)
- Use `cn()` utility for conditional classes

### 3. Forms
- Always use `ModernInput` for enhanced UX (perfect centering, floating labels)
- Use shadcn `Form` components with React Hook Form + Zod validation
- `KrapsButton` for brand consistency in primary actions

### 4. State Management
- Local state with React hooks
- Cart state via `CartStateProvider` from `@/modules/common/components/cart-state`
- Form state with controlled components

## Migration Note

**Temporary Re-exports**: Some components are temporarily re-exported through `@/lib/components` for backward compatibility. These will be gradually migrated to direct module imports.

## Adding New Components

### Foundation Component
```bash
# UI primitive
npx shadcn@latest add <component>

# Kraps brand component
# Create in src/lib/components/kraps/
# Export from src/lib/components/index.ts
```

### Feature Component
```tsx
// Create in appropriate module
src/modules/{feature}/components/{component-name}/index.tsx
// Import directly from module path
```
